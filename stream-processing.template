
{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Template to set up Kinesis stream, Lambda functions, S3 bucket, DynamoDB table and related IAM roles for AWS Lambda Real-time Stream Processing Reference Architecture. PLEASE NOTE: The CloudFormation Stack Name must be all lowercase as it is used as part of the S3 bucket name. Otherwise the stack creation will fail.",

    "Parameters" : {
        "CodeBucket": {
          "Description": "S3 Bucket containing Lambda deployment packages and sub-stack templates",
          "Type": "String",
          "Default": "awslambda-reference-architectures"
        },
        "CodeKeyPrefix": {
          "Description": "The key prefix for all deployment packages and sub-stack templates within CodeBucket",
          "Type": "String",
          "Default": "stream-processing"
        }
    },

    "Resources" : {
        "TestClientUser" : {
            "Type" : "AWS::IAM::User"
        },

        "TestClientPolicy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "StreamProcessingClientPolicy",
                "PolicyDocument" : {
                    "Statement" : [
                    {
                        "Effect" : "Allow",
                        "Action" : [
                            "kinesis:Put*"
                        ],
                        "Resource" : { "Fn::Join" : [ "", ["arn:aws:kinesis:", {"Ref" : "AWS::Region"} , ":", {"Ref" : "AWS::AccountId"}, ":stream/", {"Ref" : "EventStream"}]]}
                    }]
                },
                "Users" : [{ "Ref" : "TestClientUser" }]
            }
        },

        "TestClientKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : { "Ref" : "TestClientUser" }
            }
        },

        "EventStream" : {
            "Type" : "AWS::Kinesis::Stream",
            "Properties" : {
                "ShardCount" : 1
            }
        },

        "DdbEventProcessorFunction" : {
            "Type" : "AWS::Lambda::Function",
            "Properties" : {
                "Description" : "A function that processes streaming events and persists them to a DynamoDB table",
                "Handler" : "ddb_eventprocessor.handler",
                "MemorySize" : 128,
                "Role" : {"Fn::GetAtt" : ["EventProcessorRole", "Arn"] },
                "Timeout" : 10,
                "Runtime" : "nodejs4.3",
                "Code" : {
                    "S3Bucket" : { "Ref" : "CodeBucket" },
                    "S3Key" : {"Fn::Join": ["/", [{"Ref": "CodeKeyPrefix"}, "ddb_eventprocessor.zip"]]}
                }
            }
        },

        "EventProcessorRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [ {
                        "Effect" : "Allow",
                        "Principal" : {
                            "Service" : [ "lambda.amazonaws.com" ]
                        },
                        "Action" : [ "sts:AssumeRole" ]
                    } ]
                },
                "Path" : "/",
                "Policies" : [ {
                    "PolicyName" : "EventProcessorPolicy",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [
                            {
                                "Effect" : "Allow",
                                "Action" : [
                                    "logs:*"
                                ],
                                "Resource" : "arn:aws:logs:*:*:*"
                            },
                            {
                                "Effect" : "Allow",
                                "Action" : [
                                    "dynamodb:BatchWriteItem"
                                ],
                                "Resource" : { "Fn::Join" : [ "", ["arn:aws:dynamodb:", {"Ref" : "AWS::Region"} , ":", {"Ref" : "AWS::AccountId"} ,":table/", {"Ref": "EventDataTable"}]]}
                            },
                            {
                                "Effect" : "Allow",
                                "Action" : [
                                    "dynamodb:GetItem"
                                ],
                                "Resource" : { "Fn::Join" : [ "", ["arn:aws:dynamodb:", {"Ref" : "AWS::Region"} , ":", {"Ref" : "AWS::AccountId"} ,":table/", {"Ref": "ConfigTable"}]]}
                            }
                        ]
                    }
                } ],
                "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"]
            }
        },

        "DdbEventProcessorSourceMapping": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "FunctionName": {"Ref": "DdbEventProcessorFunction"},
                "StartingPosition": "TRIM_HORIZON",
                "BatchSize": 25,
                "EventSourceArn": {
                      "Fn::GetAtt" : [ "EventStream", "Arn"]
                }
            }
        },

        "EventDataTable" : {
            "Type" : "AWS::DynamoDB::Table",
            "Properties" : {
                "AttributeDefinitions" : [
                    {
                        "AttributeName" : "Username",
                        "AttributeType" : "S"
                    },
                    {
                        "AttributeName" : "Timestamp",
                        "AttributeType" : "S"
                    }
                ],
                "KeySchema" : [
                    {
                        "AttributeName" : "Username",
                        "KeyType" : "HASH"
                    },
                    {
                        "AttributeName" : "Timestamp",
                        "KeyType" : "RANGE"
                    }
                ],
                "ProvisionedThroughput" : {
                    "ReadCapacityUnits" : "1",
                    "WriteCapacityUnits" : "1"
                }
            }
        },

        "ConfigTable": {
          "Type" : "AWS::DynamoDB::Table",
          "Properties" : {
            "TableName" : "StreamProcessingRefArchConfig",
            "AttributeDefinitions" : [
              {
                "AttributeName" : "Environment",
                "AttributeType" : "S"
              }
            ],
            "KeySchema" : [
              {
                "AttributeName" : "Environment",
                "KeyType" : "HASH"
              }
            ],
            "ProvisionedThroughput" : {
               "ReadCapacityUnits" : 1,
               "WriteCapacityUnits" : 1
            }
          }
        },

        "ConfigHelperStack": {
          "Type" : "AWS::CloudFormation::Stack",
          "Properties" : {
            "TemplateURL" : {"Fn::Join": ["/", ["https://s3.amazonaws.com", {"Ref": "CodeBucket"}, {"Ref": "CodeKeyPrefix"}, "config-helper.template"]]},
            "Parameters" : {
              "ConfigTable": { "Ref": "ConfigTable" }
            },
            "TimeoutInMinutes" : 2
          }
        },

        "EventDataTableConfig": {
          "Type": "Custom::ConfigSetting",
          "Properties": {
            "ServiceToken": { "Fn::GetAtt" : ["ConfigHelperStack", "Outputs.ServiceToken"] },
            "Environment": "demo",
            "Key": "EventDataTable",
            "Value": { "Ref": "EventDataTable" }
          }
        }
    },

    "Outputs" : {
        "AccessKeyId" : {
            "Value" : { "Ref" : "TestClientKeys" },
            "Description" : "AWS Access Key Id of IoT client user"
        },
        "SecretAccessKey" : {
            "Value" : { "Fn::GetAtt" : ["TestClientKeys", "SecretAccessKey"]},
            "Description" : "AWS Secret Key of IoT client user"
        },
        "KinesisStream" : {
            "Value" : { "Ref" : "EventStream" },
            "Description" : "The Kinesis stream used for ingestion."
        },
        "Region" : {
            "Value" : { "Ref" : "AWS::Region" },
            "Description" : "The region this template was launched in."
        },
        "EventDataTable" : {
            "Value" : { "Ref" : "EventDataTable" },
            "Description" : "DynamoDB table that events will be stored in."
        }
    }
}
